name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ${{ matrix.os == 'alpine' && 'ubuntu-latest' || 'ubuntu-latest' }}
    container: ${{ matrix.os == 'alpine' && 'alpine:latest' || null }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu tests
          - name: "Ubuntu with PCRE2 + Coverage"
            os: ubuntu
            pcre2: true
            coverage: true
            configure_flags: "--with-pcre2"

          - name: "Ubuntu without PCRE2"
            os: ubuntu
            pcre2: false
            coverage: false
            configure_flags: "--without-pcre2"

          - name: "Ubuntu Scanner-based patchfilter + Coverage"
            os: ubuntu
            pcre2: true
            coverage: true
            scanner_patchfilter: true
            configure_flags: "--with-pcre2 --enable-scanner-patchfilter"

          # Alpine (musl) tests
          - name: "Musl with PCRE2"
            os: alpine
            pcre2: true
            coverage: false
            configure_flags: "--with-pcre2"

          - name: "Musl without PCRE2"
            os: alpine
            pcre2: false
            coverage: false
            configure_flags: "--without-pcre2"

    name: ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v4

    # Install dependencies - Ubuntu
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf \
          automake \
          build-essential \
          perl \
          patch \
          diffutils \
          xmlto \
          libpcre2-dev \
          gnulib \
          lcov

    # Install dependencies - Alpine with PCRE2
    - name: Install dependencies (Alpine with PCRE2)
      if: matrix.os == 'alpine' && matrix.pcre2
      run: |
        apk add --no-cache \
          build-base \
          autoconf \
          automake \
          perl \
          patch \
          diffutils \
          xmlto \
          pcre2-dev \
          bash \
          git \
          coreutils \
          python3

    # Install dependencies - Alpine without PCRE2
    - name: Install dependencies (Alpine without PCRE2)
      if: matrix.os == 'alpine' && !matrix.pcre2
      run: |
        apk add --no-cache \
          build-base \
          autoconf \
          automake \
          perl \
          patch \
          diffutils \
          xmlto \
          bash \
          git \
          coreutils \
          python3

    # Bootstrap - Ubuntu
    - name: Bootstrap
      if: matrix.os == 'ubuntu'
      run: ./bootstrap

    # Bootstrap - Alpine
    - name: Bootstrap (Alpine)
      if: matrix.os == 'alpine'
      run: |
        ./gnulib-update.sh
        export PATH="/tmp/gnulib:$PATH"
        ./bootstrap

    # Configure
    - name: Configure
      run: |
        CFLAGS_EXTRA=""
        LDFLAGS_EXTRA=""

        if [ "${{ matrix.coverage }}" = "true" ]; then
          CFLAGS_EXTRA="--coverage -g -O0"
          LDFLAGS_EXTRA="--coverage"
        fi

        ./configure ${{ matrix.configure_flags }} \
          ${CFLAGS_EXTRA:+CFLAGS="$CFLAGS_EXTRA"} \
          ${LDFLAGS_EXTRA:+LDFLAGS="$LDFLAGS_EXTRA"}

    # Build
    - name: Build
      run: make -j$(nproc)

    # Test
    - name: Run tests
      run: make check

    # Re-run failed tests with verbose output for immediate diagnostics
    - name: Re-run failed tests with verbose output
      if: failure()
      run: |
        echo "Re-running tests with VERBOSE=1 for better diagnostics..."
        VERBOSE=1 make check || true

    # Collect test artifacts on failure
    - name: Collect test artifacts
      if: failure()
      run: |
        # Create artifacts directory
        mkdir -p test-artifacts

        # Copy all log files with better organization
        find . -name "*.log" -type f | while read logfile; do
          # Create directory structure in artifacts
          dirname_part=$(dirname "$logfile" | sed 's|^\./||')
          mkdir -p "test-artifacts/logs/$dirname_part"
          cp "$logfile" "test-artifacts/logs/$logfile"
        done

        # Copy test-arena with full structure (not just first 20 files)
        if [ -d test-arena ]; then
          cp -r test-arena test-artifacts/
        fi

        # Create a summary of what failed
        if [ -f test-suite.log ]; then
          # Extract failed tests summary
          grep -A 5 -B 5 "FAIL\|ERROR" test-suite.log > test-artifacts/failure-summary.txt 2>/dev/null || true

          # Extract just the test names that failed
          grep "^FAIL\|^ERROR" test-suite.log | cut -d: -f2- > test-artifacts/failed-tests.txt 2>/dev/null || true
        fi

        # Create a structured failure report
        cat > test-artifacts/failure-report.md << 'EOF'
        # Test Failure Report

        ## Build Configuration
        - OS: ${{ matrix.os }}
        - PCRE2: ${{ matrix.pcre2 }}
        - Scanner Patchfilter: ${{ matrix.scanner_patchfilter }}
        - Configure Flags: ${{ matrix.configure_flags }}

        ## Failed Tests
        EOF

        if [ -f test-artifacts/failed-tests.txt ] && [ -s test-artifacts/failed-tests.txt ]; then
          echo "The following tests failed:" >> test-artifacts/failure-report.md
          echo '```' >> test-artifacts/failure-report.md
          cat test-artifacts/failed-tests.txt >> test-artifacts/failure-report.md
          echo '```' >> test-artifacts/failure-report.md
        else
          echo "No specific test failures found in test-suite.log" >> test-artifacts/failure-report.md
        fi

        # List all collected artifacts
        echo "" >> test-artifacts/failure-report.md
        echo "## Collected Artifacts" >> test-artifacts/failure-report.md
        echo '```' >> test-artifacts/failure-report.md
        find test-artifacts -type f | sort >> test-artifacts/failure-report.md
        echo '```' >> test-artifacts/failure-report.md

    # Upload test artifacts on failure
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-failure-${{ matrix.name }}-${{ github.run_number }}
        path: test-artifacts/
        retention-days: 30

    # Coverage reporting (only for coverage builds)
    - name: Generate coverage report
      if: matrix.coverage
      run: |
        # Create coverage directory
        mkdir -p coverage

        # Capture coverage data with geninfo options to handle warnings
        lcov --capture --directory . --output-file coverage/coverage.info --rc geninfo_unexecuted_blocks=1

        # Remove coverage data for system headers, lib files, and test files
        lcov --remove coverage/coverage.info '/usr/*' '*/lib/*' '*/tests/*' --output-file coverage/coverage_filtered.info --ignore-errors unused

        # Generate HTML report
        genhtml coverage/coverage_filtered.info --output-directory coverage/html

        # Generate summary for CI and extract coverage percentage
        lcov --summary coverage/coverage_filtered.info > coverage/summary.txt

        # Extract coverage percentage for badge (using awk for more reliable parsing)
        COVERAGE=$(awk '/lines\.+:/ {gsub(/[()%]/, "", $2); print $2}' coverage/summary.txt)
        echo "COVERAGE_PERCENT=$COVERAGE" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE%"

        # Extract detailed coverage info for PR comments
        LINES_COVERED=$(awk '/lines\.+:/ {print $3 " " $4 " " $5}' coverage/summary.txt | tr -d '()')
        FUNCTIONS_COVERED=$(awk '/functions\.+:/ {print $3 " " $4 " " $5}' coverage/summary.txt | tr -d '()')
        echo "LINES_COVERED=$LINES_COVERED" >> $GITHUB_ENV
        echo "FUNCTIONS_COVERED=$FUNCTIONS_COVERED" >> $GITHUB_ENV

    - name: Upload coverage to Codecov
      if: matrix.coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage_filtered.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    # Show immediate failure summary in logs
    - name: Show test failure summary
      if: failure()
      run: |
        echo "=========================================="
        echo "TEST FAILURE SUMMARY"
        echo "=========================================="
        echo "Build: ${{ matrix.name }}"
        echo "Configure flags: ${{ matrix.configure_flags }}"
        echo ""

        # Show test-suite.log summary if it exists
        if [ -f test-suite.log ]; then
          echo "=== Test Suite Summary ==="
          head -20 test-suite.log
          echo ""

          # Show failed tests specifically
          if grep -q "^FAIL\|^ERROR" test-suite.log; then
            echo "=== Failed Tests ==="
            grep "^FAIL\|^ERROR" test-suite.log || echo "No FAIL/ERROR lines found"
            echo ""

            # Show details of failed tests
            echo "=== Failure Details ==="
            grep -A 10 -B 2 "^FAIL\|^ERROR" test-suite.log | head -50
          else
            echo "No failed tests found in test-suite.log"
          fi
        else
          echo "No test-suite.log found"
        fi

        echo ""
        echo "=========================================="
        echo "Full details available in uploaded artifacts"
        echo "=========================================="

  # Separate distcheck job (doesn't fit well in matrix)
  distcheck:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf \
          automake \
          build-essential \
          perl \
          patch \
          diffutils \
          xmlto \
          libpcre2-dev \
          gnulib

    - name: Bootstrap
      run: ./bootstrap

    - name: Configure
      run: ./configure --with-pcre2

    - name: Build and test distribution
      run: make distcheck

    # Collect distcheck artifacts on failure
    - name: Collect distcheck artifacts
      if: failure()
      run: |
        mkdir -p distcheck-artifacts

        # Copy all log files
        find . -name "*.log" -type f | while read logfile; do
          dirname_part=$(dirname "$logfile" | sed 's|^\./||')
          mkdir -p "distcheck-artifacts/logs/$dirname_part"
          cp "$logfile" "distcheck-artifacts/logs/$logfile"
        done

        # Copy test-arena if it exists
        if [ -d test-arena ]; then
          cp -r test-arena distcheck-artifacts/
        fi

        # Look for distcheck-specific directories
        find . -name "patchutils-*" -type d | head -5 | while read distdir; do
          if [ -d "$distdir" ]; then
            cp -r "$distdir" distcheck-artifacts/ 2>/dev/null || true
          fi
        done

    # Upload distcheck artifacts on failure
    - name: Upload distcheck artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: distcheck-failure-${{ github.run_number }}
        path: distcheck-artifacts/
        retention-days: 30

    # Show distcheck failure summary
    - name: Show distcheck failure summary
      if: failure()
      run: |
        echo "=========================================="
        echo "DISTCHECK FAILURE SUMMARY"
        echo "=========================================="

        # Show any test-suite.log from distcheck
        find . -name "test-suite.log" -type f | while read logfile; do
          echo "=== $logfile ==="
          head -20 "$logfile"
          echo ""
          if grep -q "^FAIL\|^ERROR" "$logfile"; then
            echo "Failed tests in $logfile:"
            grep "^FAIL\|^ERROR" "$logfile"
            echo ""
          fi
        done

        echo "Full details available in uploaded artifacts"
